---
import Card from "./Card.astro";
let {glideClass, slides} = Astro.props;

let slideClass = `glide ${glideClass}`
---

<div class={slideClass} id={glideClass}>
    <div class="glide__track" data-glide-el="track">
        <div class="glide__slides">
            {slides.map(slide => (
                    <Card
                            title={slide.title}
                            text={slide.text}
                            image={slide.image}
                            href={slide.href}
                            hoverColor={slide.hoverColor}
                    />
            ))}
        </div>
    </div>
</div>

<style>
    .glide__slides {
        white-space: unset;

        @media screen and (max-width: 766px) {
            display: block;
            padding-left: 30px;
            padding-right: 30px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const glideClass = document.querySelectorAll('.glide')

        const options = {
            type: 'carousel',
            perView: 2,
            gap: 30,
            autoplay: 5000,
            hoverpause: true,
            peek: {
                before: 30,
                after: 200
            },
            breakpoints: {
                1200: {
                    perView: 1,
                    peek: {
                        before: 30,
                        after: 150
                    },
                },
                992: {
                    gap: 20,
                    perView: 2,
                    peek: {
                        before: 20,
                        after: 80
                    },
                }
            }
        };

        let slides = [];
        let isSliderInitialized = false;

        function initSlider() {
            if (window.matchMedia("(min-width: 767px)").matches && !isSliderInitialized) {
                glideClass.forEach((glide) => {
                    slides.push(new Glide(`.${glide.id}`, options).mount());
                });
                isSliderInitialized = true;
            }
        }

        function destroySlider() {
            if (isSliderInitialized) {
                slides.forEach((slide) => {
                    slide.destroy();
                });
                slides = [];
                isSliderInitialized = false;
            }
        }

        initSlider();

        window.addEventListener('resize', function () {
            if (window.matchMedia("(min-width: 767px)").matches && !isSliderInitialized) {
                initSlider();
            } else if (!window.matchMedia("(min-width: 767px)").matches && isSliderInitialized) {
                destroySlider();
            }
        });
    });

</script>